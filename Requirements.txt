 Objective
 build, deploy, and scale an AI-driven web app that provides dynamic content generation. The app should be built using React, Node.js, and modern cloud tools, and should be fully dockerized, scalable, and production-ready.
At the end of the task, you will also write a technical document describing your thought process, technical choices, and how you approached the task.

________________________________________
Task Overview
You will develop a Scalable AI-Powered Web App that allows users to:
‚úÖ Generate AI-powered blog posts based on user input.
‚úÖ Edit & save drafts in a simple user dashboard.
‚úÖ Share generated content via a public link.
‚úÖ Support multi-user authentication (basic auth or JWT).
‚úÖ Ensure the app is Dockerized and cloud-deployable.
________________________________________
 Requirements
1Ô∏è. Frontend (React + Next.js with ShadCN UI)
‚Ä¢	Use ShadCN UI (https://ui.shadcn.com/) for a clean and modern UI.
*   The package is called shadcn and NOT shadcn-ui , shadcn-ui is DEPRECATED!
*   You are already in the frontend dir so you dont need to navigate to it
‚Ä¢	User Authentication System (Login/Signup with JWT or OAuth).
‚Ä¢	A user dashboard where users can: 
o	Enter a topic and writing style (e.g., "Tech News in a Professional Tone").
o	Click "Generate" to create an AI-generated blog post.
o	Edit & save drafts for later use.
o	View a list of their previously generated posts.
‚Ä¢	A publicly shareable page for each post (e.g., yourapp.com/posts/1234).
‚Ä¢	Use React Query / SWR for efficient API requests.
________________________________________
2Ô∏è. Backend (Node.js + Express / Fastify / NestJS)
‚Ä¢	A RESTful API with the following endpoints: 
o	POST /auth/signup ‚Üí Register users.
o	POST /auth/login ‚Üí Authenticate users and return JWT.
o	POST /generate ‚Üí Accepts input (topic, style) and calls OpenAI API (or Hugging Face LLMs) to generate a blog post.
o	POST /posts/save ‚Üí Saves a generated post to the database.
o	GET /posts/user ‚Üí Fetches a user‚Äôs saved posts.
o	GET /posts/:id ‚Üí Returns a single post for public viewing.
‚Ä¢	Database Integration: Use PostgreSQL / MongoDB / Firebase to store user data and posts.
‚Ä¢	Implement rate-limiting (to prevent excessive API calls).
‚Ä¢	Add basic logging and error handling for API failures.
________________________________________
3Ô∏è. Deployment & Scalability
‚Ä¢	Dockerize both frontend & backend (separate services).
‚Ä¢	Use Docker Compose to manage both services.
‚Ä¢	Deploy VERCEL/ AWS
‚Ä¢	Set up auto-scaling Cloud Functions
‚Ä¢	Use Cloudflare caching to optimize API response times.
________________________________________


This version ensures the candidate demonstrates real-world development skills, follows best practices, and documents their work‚Äîwhich is crucial for an innovation team. üöÄ
